#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W             &kp E             &kp R      &kp T                                                &kp Y      &kp U  &lt 5 I    &kp O    &kp P
&kp A           &kp S             &kp D             &kp F      &kp G             &kp LS(LG(S))       &to 7          &kp H      &kp J  &kp K      &kp L    &kp MINUS
&kp Z           &kp X             &kp C             &kp V      &kp B             &kp COLON           &kp SEMICOLON  &kp N      &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_SHIFT  &mt LEFT_WIN TAB  &kp LEFT_CONTROL  &kp SPACE  &lt 2 LANGUAGE_1  &lt 1 LANGUAGE_2    &kp BACKSPACE  &kp ENTER                             &kp LEFT_ALT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &bt BT_NXT  &bt BT_PRV                    &kp F7  &kp F8  &kp F9  &trans   &trans
&trans  &trans  &trans  &trans      &trans      &trans    &trans  &kp F4  &kp F5  &kp F6  &trans   &kp F12
&trans  &trans  &trans  &trans      &trans      &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F10  &kp F11
&trans  &trans  &trans  &trans      &trans      &trans    &trans  &trans                           &trans
            >;
        };

        NUM {
            bindings = <
&kp ESC                     &kp KP_NUMBER_7    &kp KP_NUMBER_8  &kp HOME        &kp END                                                     &kp N7  &kp N8  &kp N9  &kp LEFT_BRACKET  &kp EQUAL
&kp SLASH                   &kp RIGHT_BRACKET  &kp BACKSLASH    &kp DOWN_ARROW  &kp UP_ARROW     &kp LC(LA(KP_NUMBER_0))    &kp UNDERSCORE  &kp N4  &kp N5  &kp N6  &kp SEMICOLON     &kp SQT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1    &kp INT_YEN      &kp LEFT_ARROW  &kp RIGHT_ARROW  &kp EQUAL                  &trans          &kp N1  &kp N2  &kp N3  &kp N0            &kp INT1
&trans                      &trans             &kp RCTRL        &trans          &trans           &trans                     &trans          &trans                                    &kp LEFT_ALT
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                     &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans    &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans    &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mo 5     &mkp MB1  &mkp MB2  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mkp MB3  &trans    &mkp MB4  &mkp MB5  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans    &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        game {
            bindings = <
&kp ESCAPE  &kp N1  &kp N2  &kp N3  &kp N4                    &kp N5    &kp N6    &kp N7    &kp N8    &kp N9
&trans      &kp Q   &kp W   &kp E   &kp R   &kp T     &to 0   &mo 5     &mkp MB1  &mkp MB2  &trans    &trans
&kp TAB     &kp A   &kp S   &kp D   &kp F   &kp G     &trans  &mkp MB3  &trans    &mkp MB4  &mkp MB5  &trans
&trans      &trans  &trans  &trans  &trans  &trans    &trans  &trans                                  &trans
            >;
        };
    };
};
